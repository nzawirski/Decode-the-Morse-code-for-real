import MORSE_CODE from "./morse.js";
const decodeMorse = function (morseCode) {
    return morseCode.split(' ').map(e => e === '' ? ' ' : MORSE_CODE[e]).join('').replace(/\s\s/g, ' ').trim()
}
const decodeBitsAdvanced = function (bits) {
    console.log(bits)
    bits = bits.replace(/^0+/g, '').replace(/0+$/g, '')
    if (!bits) {
        return ''
    }
    // count lengths of each part
    let zeroLengths = []
    let oneLengths = []
    bits.split(/1+/g).forEach(bit => {
        if (bit.length > 0) {
            zeroLengths.push(bit.length)
        }
    })
    bits.split(/0+/g).forEach(bit => {
        if (bit.length > 0) {
            oneLengths.push(bit.length)
        }
    })
    // sort lengths and remove duplicates
    zeroLengths = zeroLengths.sort((a, b) => a - b);
    oneLengths = oneLengths.sort((a, b) => a - b);
    const distinctZeroLengths = [...new Set(zeroLengths)]
    const distinctOneLengths = [...new Set(oneLengths)]

    // thresholds that will be used to detect symbols
    const dotPause = {
        min: distinctZeroLengths[0],
        max: 0
    }
    const dashPause = {
        min: 0,
        max: 0
    }
    const space = {
        min: 0,
        max: distinctZeroLengths[distinctZeroLengths.length - 1]
    }
    const dot = {
        min: distinctOneLengths[0],
        max: 0
    }
    const dash = {
        min: 0,
        max: distinctOneLengths[distinctOneLengths.length - 1],
    }

    // arbitrarily divide chunks into set of thresholds - for pauses
    const dotPauseThreshold = 0.22
    const dashPauseThreshold = 0.64
    const zerosDiff = (distinctZeroLengths[distinctZeroLengths.length - 1] - distinctZeroLengths[0])
    distinctZeroLengths.forEach(e => {
        if (e <= distinctZeroLengths[0] + zerosDiff * dotPauseThreshold) {
            dotPause.max = e;
            dashPause.min = e + 1
        }
        if (e <= distinctZeroLengths[0] + zerosDiff * dashPauseThreshold) {
            dashPause.max = e;
            space.min = e + 1
        }
    })
    // make sure maxima are not smaller than minima
    if (dashPause.min > dashPause.max) {
        dashPause.min = dashPause.max
    }
    if (space.min > space.max) {
        space.min = space.max
    }

    // arbitrarily divide chunks into set of thresholds - for ones
    const dotThreshold = 0.44
    const onesDiff = (distinctOneLengths[distinctOneLengths.length - 1] - distinctOneLengths[0])
    distinctOneLengths.every(e => {
        if (e <= distinctOneLengths[0] + onesDiff * dotThreshold) {
            dot.max = e;
            dash.min = e + 1
            return true
        }
        return false
    })
    // make sure maxima are not smaller than minima
    if (dash.min > dash.max) {
        dash.min = dash.max
    }

    // see what we just did
    console.log(distinctZeroLengths, distinctOneLengths)
    console.log('dash', dash)
    console.log('dot', dot)
    console.log('space', space)
    console.log('dashPause', dashPause)
    console.log('dotPause', dotPause)

    //replace strings of ones and zeros with detected symbols or pauses using regex
    let result = bits
    //dashes
    // if unsure if dot or dash we assume dot, so skipping in that case
    // unless spaces length suggests otherwise
    if(dash.min !== dot.max || (dashPause.max && dash.min > dashPause.max * 2)){
        const dashRegEx = new RegExp(`1{${dash.min},${dash.max}}`, 'g');
        result = result.replace(dashRegEx, '-')
    }
    //dots
    const dotRegEx = new RegExp(`1{${dot.min},${dot.max}}`, 'g');
    result = result.replace(dotRegEx, '.')

    //spaces between words
    // uhh im not sure why im checking for this
    if(space.min !== dashPause.max || (dot.max && space.min > dot.max * 4)){
        const spaceRegEx = new RegExp(`0{${space.min},${space.max}}`, 'g');
        result = result.replace(spaceRegEx, '   ')
    }

    //spaces between letters
    // more arbitrary bullshit checks
    if(dashPause.min !== dotPause.max || (dot.max && dashPause.min > dot.max * 1.5)){
        const dashPauseRegEx = new RegExp(`0{${dashPause.min},${dashPause.max}}`, 'g');
        result = result.replace(dashPauseRegEx, ' ')
    }

    //spaces between parts
    const dotPauseRegEx = new RegExp(`0{${dotPause.min},${dotPause.max}}`, 'g');
    result = result.replace(dotPauseRegEx, '')

    return result;
}

const msg
// const msg = '1001'
const decoded = decodeBitsAdvanced(msg);

console.log(decoded)
console.log(decodeMorse(decoded))